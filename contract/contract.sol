// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "@chainlink/contracts@0.8.0/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol";
import "@chainlink/contracts@0.8.0/src/v0.8/vrf/VRFConsumerBaseV2.sol";
import "@chainlink/contracts@0.8.0/src/v0.8/shared/access/ConfirmedOwner.sol";
import "@chainlink/contracts@0.8.0/src/v0.8/automation/AutomationCompatible.sol";


error Lottery__NotEnoughEthEntered();
error Lottery__TransferFailed();
error Lottery__LotteryClosed();
error Lottery__UpKeepNotNeeded(uint256 currentBalance , uint256 numPlayers , uint256 lotteryState);

contract Lottery is VRFConsumerBaseV2 ,AutomationCompatibleInterface{
    // Type declarations
    enum LotteryState {
        OPEN ,
        CALCULATING
    }
    
    // STATE VARIABLES

    uint256 private immutable i_enterenceFee;
    address payable[] private s_players;
    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;
    bytes32 private immutable i_gasLane;
    uint64 private immutable i_subscriptionId;
    uint16 private constant Request_Confirmations = 3;
    uint32 private immutable i_callbackGasLimit;
    uint32 private constant Num_Words = 1;

    // Lottery Variables
    address private s_recentWinner;
    LotteryState private s_lotteryState; // to pending , open , closed , calculating
    uint256 private s_lastBlockTimeStamp = block.timestamp;
    uint256 private immutable i_interval;

    // EVENTS
    event EnterLottery(address indexed players);
    event RequestedLotteryWinner(uint256 indexed requestId);
    event WinnerPicked(address indexed winner);


    constructor(uint256 enterenceFee , address _vrfCoordinator , bytes32 gasLane, uint64 subscriptionId , uint32 callbackGasLimit , uint256 interval) VRFConsumerBaseV2(_vrfCoordinator){
        i_vrfCoordinator = VRFCoordinatorV2Interface(_vrfCoordinator);
        i_enterenceFee = enterenceFee;
        i_gasLane = gasLane;
        i_subscriptionId = subscriptionId;
        i_callbackGasLimit = callbackGasLimit;
        s_lotteryState = LotteryState(0); // or LotteryState.OPEN
        i_interval = interval;
    }

    function enterLottery() payable public {
        if(msg.value < i_enterenceFee)
        { 
            revert Lottery__NotEnoughEthEntered();
        }
        if(s_lotteryState != LotteryState.OPEN)
        {
            revert Lottery__LotteryClosed();
        }
        s_players.push(payable(msg.sender));

        emit EnterLottery(msg.sender);
    }

    // We want checkUpKeep to work only when lottery is open
    // The lottery should have at least 1 player
    // Our subscription is funded with LINK
    // The lottery should be in "open" State

    function checkUpkeep( bytes memory /* checkData */) public view override returns (bool upkeepNeeded, bytes memory /* performData */)
        // external our contract cannot call check upkeep function
    {
        bool isOpen = (LotteryState.OPEN == s_lotteryState);
        bool timePassed = ((block.timestamp - s_lastBlockTimeStamp) > i_interval);
        bool hasPlayers = (s_players.length >= 1);
        bool hasBalance = address(this).balance > 0;
        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);
        return (upkeepNeeded, "0x0");
    }

    function performUpkeep(bytes calldata /* performData */) external override {
        
        (bool upkeepNeeded, ) = checkUpkeep("");
        if(!upkeepNeeded)
        {
            revert Lottery__UpKeepNotNeeded(address(this).balance, s_players.length , uint256(s_lotteryState));
        }

        s_lotteryState = LotteryState.CALCULATING;
        uint256 requestId = i_vrfCoordinator.requestRandomWords(
            i_gasLane, //gasLane
            i_subscriptionId,
            Request_Confirmations,
            i_callbackGasLimit,
            Num_Words
        );

        emit RequestedLotteryWinner(requestId);
        // We don't use the performData in this example. The performData is generated by the Automation Node's call to your checkUpkeep function
    }

    // View / Pure Functions

    function fulfillRandomWords( uint256 /*_requestId*/ , uint256[] memory _randomWords ) internal override {
        uint256 indexOfWinner = _randomWords[0] % s_players.length;
        address payable recentWinner = s_players[indexOfWinner];
        s_recentWinner = recentWinner;
        s_lotteryState = LotteryState.OPEN;
        s_players = new address payable[](0); 
        (bool success ,) = recentWinner.call{value: address(this).balance}("");
        if(!success)
        {
            revert Lottery__TransferFailed(); 
        }
        emit WinnerPicked(s_recentWinner);
    }

    function viewEnterenceFee() public view returns(uint256) {
        return i_enterenceFee;
    }

    function getPlayer(uint256 index) public view returns(address) {
        return s_players[index];
    }

    function getRecentWinner() public view returns(address){
        return s_recentWinner;
    }

    function getLotteryState() public view returns(LotteryState){
        return s_lotteryState;
    }

    function getNumWords() public pure returns(uint32){
        return Num_Words;
    }

    function getNumOfPlayers() public view returns(uint256)
    {
        return s_players.length;
    }

    function getLatestTimeStamp() public view returns(uint256)
    {
        return s_lastBlockTimeStamp;
    }

    function getrequestConfirmations() public pure returns(uint256) {
        return Request_Confirmations;
    }
}